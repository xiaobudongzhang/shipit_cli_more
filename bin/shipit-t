#!/usr/bin/env node

var chalk = require('chalk');
var interpret = require('interpret');
var v8flags = require('v8flags');
var Liftoff = require('liftoff');
var argv = require('minimist')(process.argv.slice(2));
var Shipit = require('../lib/shipit');
var pkg = require('../package.json');
var Promise = require('bluebird');

// Initialize cli.
var cli = new Liftoff({
  name: 'shipit',
  extensions: interpret.jsVariants,
  v8flags: v8flags
});

// Launch cli.
cli.launch({
  cwd: argv.cwd,
  configPath: argv.shipitfile,
  require: argv.require,
  completion: argv.completion,
}, invoke);

/**
 * Invoke CLI.
 *
 * @param {object} env CLI environment
 */

function invoke(env) {

  if(argv.help){
	console.log(chalk.yellow(' --name    必填 项目名称 \n --env     可选(默认dev) 发布环境\n --task    可选(默认deploy) 事件 \n --branch  可选(默认master) 发布分支\n'))
	exit(0); 
 }

  if (argv.version) {
    console.info('v%s', pkg.version);
    exit(0);
  }

  if (!env.configPath) {
    console.error(chalk.red('shipitfile not found'));
    exit(1);
  }
  
  let envme='dev'
  if (argv.env ) {
    envme=argv.env
  }

  // Run the 'default' task if no task is specified
 
  let tasks='deploy' 
  if (argv.task) {
     tasks = argv.task;
  }
  
  let  branch='master'
  if(argv.branch){
	branch=argv.branch
  }
  
	

  if(!argv.name){
    console.error(chalk.red('name not found'));
    exit(1);

  }
  let project_name=argv.name

  try {
    initShipit(envme, env.configPath, [tasks],branch,project_name);
  } catch(e) {
    console.error(chalk.red(e.message));
    exit(1);
  }
}

/**
 * Initialize shipit.
 *
 * @param {string} env Shipit environement
 * @param {string} shipfile Shipitfile path
 * @param {string[]} tasks Tasks
 */

function initShipit(env, shipfile,tasks,bran,project_name) {
//console.log(arguments)
  // Create.
  var shipit = new Shipit({environment: env,branch:bran,project_name:project_name});

  // Load shipfile.
  var pendingConfig = require(shipfile)(shipit,project_name);

  var done = function() {

    // Initialize shipit.
    shipit.initialize();

    // Run tasks.
    shipit.start(tasks);

    shipit.on('task_err', function() {
      exit(1);
    });

    shipit.on('task_not_found', function() {
      exit(1);
    });
  }

  Promise.resolve(pendingConfig)
  .then(done)
  .catch(function(err) {
    console.error('Could not load async config.', err);
  } )
}

/**
 * Properly exit.
 * Even on Windows.
 *
 * @param {number} code Exit code
 */

function exit(code) {
  if (process.platform === 'win32' && process.stdout.bufferSize) {
    process.stdout.once('drain', function() {
      process.exit(code);
    });
    return;
  }

   process.exit(code);
}
